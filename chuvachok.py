import telebot
from telebot import types
from telebot.types import InlineKeyboardButton
import sqlite3

bot = telebot.TeleBot('8336492357:AAFaNP2Fh01sry8PqdxMXIZCTHTPA5-HExc')
channel_id = '@ch_vch'
user_states = {}
ADMIN_CHAT_IDS = [294829811,727302720]
#–û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ
def show_main_menu(chat_id, first_name):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üì∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç')
    btn2 = types.KeyboardButton('üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
    markup.add(btn1, btn2)
    bot.send_message(chat_id,'–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?', reply_markup=markup)

#–ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ß–ö–ò –ù–ê –ö–ê–ù–ê–õ
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    try:
        chat_member = bot.get_chat_member(channel_id, user_id)
        print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {chat_member.status}")

        if chat_member.status == 'left':

            markup = types.InlineKeyboardMarkup()
            sub_but = InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url='https://t.me/ch_vch')
            ch_but = InlineKeyboardButton('–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!', callback_data="check_subscription")
            markup.add(sub_but, ch_but)

            bot.send_message(message.chat.id,f'–ù–µ, {message.from_user.first_name}, —Å–ª—É—à–∞–π, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Çüò°!\n–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å, –∞ –ø–æ—Ç–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏–ºü§ì', reply_markup = markup)

        else:
            bot.send_message(message.chat.id,f'–û—Ç–ª–∏—á–Ω–æ, {message.from_user.first_name}, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!')
            bot.send_message(message.chat.id, '–Ø –ß—É–≤–∞—á–æ–∫, —è –≤–∏–∂—É, —á—Ç–æ —Ç—ã –Ω–∞—à –ø–∞–ø–∏—â–µ–∫!')
            bot.send_message(message.chat.id, '–•–æ—á–µ—à—å —á–µ–º-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å? –Ø –≥–æ—Ç–æ–≤ —Ç–µ–±—è –≤—ã—Å–ª—É—à–∞—Ç—å!')

            show_main_menu(message.chat.id, message.from_user.first_name)

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.")

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")


def check_subscription(call):
    user_id = call.from_user.id

    try:
        chat_member = bot.get_chat_member(channel_id, user_id)

        if chat_member.status == 'left':
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            bot.answer_callback_query(
                call.id,
                "‚ùå –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª'",
                show_alert=True
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"‚úÖ –°—É–ø–µ—Ä, {call.from_user.first_name}! –¢–µ–ø–µ—Ä—å —Ç—ã —Å –Ω–∞–º–∏!\n–Ø –ß—É–≤–∞—á–æ–∫, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n–•–æ—á–µ—à—å —á–µ–º-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å?\n–Ø –≥–æ—Ç–æ–≤ —Ç–µ–±—è –≤—ã—Å–ª—É—à–∞—Ç—å!")
            show_main_menu(call.message.chat.id, call.from_user.first_name)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")


#–û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°
@bot.message_handler(func=lambda message: message.text == 'üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
def suggest_question(message):
    if user_states.get(message.from_user.id) in ['waiting_question', 'waiting_post']:
        bot.send_message(message.chat.id, '‚ùå –¢—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏! –î–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.')
        return

    remove_markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, '‚åõ –ì–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å...', reply_markup=remove_markup)

    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), text varchar(1000))')
    conn.commit()
    cur.close()
    conn.close()
    user_states[message.from_user.id] = 'waiting_question'

    bot.send_message(message.chat.id,'–°–ª—É—à–∞—é —Ç–µ–±—è, —á—É–≤–∞—á–æ–∫. –ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!')

#–û–ë–†–ê–ë–û–¢–ö–ê —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_question')
def check_waiting_question(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    if message.from_user.username:
        user_name = f"@{message.from_user.username}"

#–û–¢–õ–ê–î–ö–ê
    print("‚îÄ" * 50)
    print('–î–æ—Ä–æ–≥–∏–µ –∞–¥–º–∏–Ω—ã, –∫–∞–∫–æ–π-—Ç–æ –ø–∞–ø–∏—â–µ–∫ –≤–∞–º —á—Ç–æ-—Ç–æ –ø—Ä–∏—Å–ª–∞–ª!')
    print("‚îÄ" * 50)
    print('–ï–≥–æ –∑–æ–≤—É—Ç:', user_name)
    print('–ù–∞–ø–∏—Å–∞–ª –æ–Ω:', message.text)
    print("‚îÄ" * 50)

    admin_message = (
        f"üì∞ –ù–û–í–´–ô –ü–û–°–¢ –û–¢ –ü–û–î–ü–ò–°–ß–ò–ö–ê\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
        f"üìù –¢–µ–∫—Å—Ç:\n{message.text}"
    )

    try:
        for admin_id in ADMIN_CHAT_IDS:
            bot.send_message(admin_id, admin_message)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    cur.execute('INSERT INTO users (name, text) VALUES (?, ?)', (user_name, message.text))
    conn.commit()
    cur.close()
    conn.close()

    del user_states[user_id]
    bot.send_message(message.chat.id, '‚úÖ –°–ø–∞—Å–∏–±–æ! –ê–¥–º–∏–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—é—Ç —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')

    show_main_menu(message.chat.id, message.from_user.first_name)

#–û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –ü–†–ï–î–õ–û–ñ–ò–¢–¨ –ü–û–°–¢
@bot.message_handler(func=lambda message: message.text == 'üì∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç')
def suggest_post(message):
    if user_states.get(message.from_user.id) in ['waiting_question', 'waiting_post']:
        bot.send_message(message.chat.id, '‚ùå –¢—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏! –î–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.')
        return
    remove_markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, '‚åõ –ì–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å...', reply_markup=remove_markup)

    conn = sqlite3.connect('database2.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS posts (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, user_name TEXT, content_type TEXT, text TEXT, file_id TEXT)')
    conn.commit()
    cur.close()
    conn.close()

    user_states[message.from_user.id] = 'waiting_post'

    bot.send_message(message.chat.id,'–ü—Ä–∏—Å—ã–ª–∞–π —Å–≤–æ–π –ø–æ—Å—Ç!')
@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice'], func=lambda message: user_states.get(message.from_user.id) == 'waiting_post')
def check_waiting_post(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    if message.from_user.username:
        user_name = f"@{message.from_user.username}"

    conn = sqlite3.connect('database2.sql')
    cur = conn.cursor()

    content_type = message.content_type
    text_content = message.text or message.caption or ''
    file_id = None

    # –ü–æ–ª—É—á–∞–µ–º file_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif message.content_type == 'video':
        file_id = message.video.file_id
    elif message.content_type == 'document':
        file_id = message.document.file_id
    elif message.content_type == 'audio':
        file_id = message.audio.file_id
    elif message.content_type == 'voice':
        file_id = message.voice.file_id


    cur.execute('INSERT INTO posts (user_id, user_name, content_type, text, file_id) VALUES (?, ?, ?, ?, ?)',
                (user_id, user_name, content_type, text_content, file_id))
    conn.commit()
    cur.close()
    conn.close()

    admin_message = (
        f"üì∞ –ù–û–í–´–ô –ü–û–°–¢ –û–¢ –ü–ê–ü–ò–©–ò–ö–ê\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
    )

    if text_content:
        admin_message += f"üìù –¢–µ–∫—Å—Ç: {text_content}\n"

    try:

        for admin_id in ADMIN_CHAT_IDS:
            if content_type == 'text':
                bot.send_message(admin_id, admin_message)
            elif content_type == 'photo':
                bot.send_photo(admin_id, file_id, caption=admin_message)
            elif content_type == 'video':
                bot.send_video(admin_id, file_id, caption=admin_message)
            elif content_type == 'document':
                bot.send_document(admin_id, file_id, caption=admin_message)
            elif content_type == 'audio':
                bot.send_audio(admin_id, file_id, caption=admin_message)
            elif content_type == 'voice':
                bot.send_voice(admin_id, file_id, caption=admin_message)

            print(f"‚úÖ {content_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    # –û–¢–õ–ê–î–ö–ê
    print("‚îÄ" * 50)
    print('–î–æ—Ä–æ–≥–∏–µ –∞–¥–º–∏–Ω—ã, –∫–∞–∫–æ–π-—Ç–æ –ø–∞–ø–∏—â–µ–∫ –≤–∞–º —á—Ç–æ-—Ç–æ –ø—Ä–∏—Å–ª–∞–ª!')
    print("‚îÄ" * 50)
    print('–ï–≥–æ –∑–æ–≤—É—Ç:', user_name)
    print(f"üì¶ –¢–∏–ø: {content_type}")
    if text_content:
        print(f"üìù –¢–µ–∫—Å—Ç: {text_content}")
    print("‚îÄ" * 50)

    del user_states[user_id]

    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!')

    show_main_menu(message.chat.id, message.from_user.first_name)

@bot.message_handler(content_types = ['text'])
def defolt_messages(message):
    if user_states.get(message.from_user.id) not in ['waiting_question', 'waiting_post']:
        bot.send_message(message.chat.id,'–Ø –Ω–µ —É–º–µ—é —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å, –ª—É—á—à–µ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é!')
    show_main_menu(message.chat.id, message.from_user.first_name)

bot.polling(none_stop=True)


# –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø—É –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é)
# –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —É–∂–µ –Ω–∞–∂–∞–ª–∏